// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"basic/pkg/app"
	"basic/pkg/jwt"
	"basic/pkg/logger"
	"basic/pkg/server/http"
	"basic/source/handler"
	"basic/source/repository"
	"basic/source/router"
	"basic/source/service"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, loggerLogger *logger.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handlerHandler := handler.NewHandler(loggerLogger)
	serviceService := service.NewService(loggerLogger, jwtJWT)
	db := repository.NewDB(viperViper, loggerLogger)
	repositoryRepository := repository.NewRepository(loggerLogger, db)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := service.NewUserService(serviceService, userRepository)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	server := routes.NewHTTPServer(loggerLogger, viperViper, jwtJWT, userHandler)
	appApp := newApp(server)
	return appApp, func() {
	}, nil
}

// wire.go:

var serverSet = wire.NewSet(routes.NewHTTPServer)

var JwtSet = wire.NewSet(jwt.NewJwt)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService)

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository)

func newApp(httpServer *http.Server) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName("demo-server"))
}
